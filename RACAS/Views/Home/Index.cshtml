@using RACAS.Models;
@using RACAS.Model
@using RACAS.Controllers
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Localization
@using System.Globalization

@inject IStringLocalizer<HomeController> Localizer
@{
    string currCul = "";
    string curCulName = "English";
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();

    if (requestCulture.RequestCulture.Culture.Name == "ar-SA")
    {
        curCulName = "Arabic";
        currCul = "https://cdn.datatables.net/plug-ins/1.12.1/i18n/ar.json";
    }

    List<MenuViewModel> menuList = (List<MenuViewModel>)ViewData["UserRoleMenu"];
    bool CanCreate = false, CanDelete = false, CanEdit = false, CanExport = false, CanEmail = false;
    if (menuList?.Count > 0)
    {
        foreach (var m in menuList)
        {
            if (m.ModuleId == "liusers")
            {
                if (m.ActionName == "Create")
                    CanCreate = true;
                if (m.ActionName == "Edit")
                    CanEdit = true;
                if (m.ActionName == "Delete")
                    CanDelete = true;
                if (m.ActionName == "Export")
                    CanExport = true;
                if (m.ActionName == "Email")
                    CanEmail = true;
            }
        }
    }
}
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
  

}

<section class="content-header">
    <h1>
        Dashboard
        <small>Control panel</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Dashboard</li>
    </ol>
</section>
<!-- Main content -->
<section class="content" id="appDash">
  
    <div class="row">
        <div class="col-md-12">
            <div class="box">
                <div class="box-header" style="height:46px">
                    <div class="box-tools">
                        <form id="filterData" style="display:inline-flex">
                                <select v-model="selectedMonth" class="form-control">
                                    <option v-for="(month, index) in months" :key="index" :value="index + 1">
                                        {{ month }}
                                    </option>
                                </select>
                              
                                <select v-model="selectedYear" class="form-control">
                                    <option v-for="(year, index) in yearList" :key="index" :value="year">
                                        {{ year }}
                                    </option>
                                </select>
                            <button type="submit" v-on:click=" LoadPaymentData($event)" class="btn btn-primary">Filter</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Small boxes (Stat box) -->
    <div class="row">
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3 style="margin-bottom:-3px">{{ Summary.TotalSubmittedCount }}</h3>
                    <p style="margin-bottom:0px">Total Submitted Payments</p>
                    <p style="margin-bottom:0px;font-weight:bold">Income: {{ Summary.TotalSubmittedIncome || 0 }}</p>
                    <p style="margin-bottom:0px;font-weight:bold">Expense: {{ Summary.TotalSubmittedExpense || 0 }}</p>
                </div>
                <div class="icon">
                    <i class="ion ion-checkmark"></i>
                </div>
            </div>
        </div><!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-green">
                <div class="inner">
                    <h3 style="margin-bottom:-3px">{{ Summary.TotalOrderedCount  }}</h3>
                    <p style="margin-bottom:0px">Total Ordered Payments</p>
                    <p style="margin-bottom:0px;font-weight:bold">Income: {{ Summary.TotalOrderedIncome || 0 }}</p>
                    <p style="margin-bottom:0px;font-weight:bold">Expense: {{ Summary.TotalOrderedExpense || 0 }}</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bag"></i>
                </div>
            </div>
        </div><!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-yellow">
                <div class="inner">
                    <h3 style="margin-bottom:-3px">{{ Summary.TotalControlCheckedCount }}</h3>
                    <p style="margin-bottom:0px">Control Checked Payments</p>
                    <p style="margin-bottom:0px;font-weight:bold">Income: {{ Summary.TotalControlCheckedIncome || 0 }}</p>
                    <p style="margin-bottom:0px;font-weight:bold">Expense: {{ Summary.TotalControlCheckedExpense || 0 }}</p>
                </div>
                <div class="icon">
                    <i class="ion ion-checkmark-round"></i>
                </div>
            </div>
        </div><!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <div class="small-box bg-red">
                <div class="inner">
                    <h3 style="margin-bottom:-3px">{{ Summary.TotalApprovedCount }}</h3>
                    <p style="margin-bottom:0px">Approved Payments</p>
                    <p style="margin-bottom:0px;font-weight:bold">Income: {{ Summary.TotalApprovedExpense || 0 }}</p>
                    <p style="margin-bottom:0px;font-weight:bold">Expense: {{ Summary.TotalApprovedExpense || 0 }}</p>
                </div>
                <div class="icon">
                    <i class="ion ion-thumbsup"></i>
                </div>
            </div>
        </div><!-- ./col -->
    </div><!-- /.row -->
    <div class="row">
        <div class="col-md-12">
        
        <canvas id="graphCompare" style="height:250px">
            
        </canvas>
        </div>
    </div>
</section><!-- /.content -->

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script>
    var objCommon = new Common();
    var LanguageUrl = '@currCul';
    var app = new Vue({
        el: '#appDash',
        data: {
           s: {
                 totalSubmitted: 0,
            totalOrdered: 0,
            totalControlChecked: 0,
            totalApproved: 0,
            totalIncomeSubmitted: 0,
            totalExpenseSubmitted: 0,
            totalIncomeOrdered: 0,
            totalExpenseOrdered: 0,
            totalIncomeControlChecked: 0,
            totalExpenseControlChecked: 0,
            totalIncomeApproved: 0,
            totalExpenseApproved: 0,
           },
           Summary: {},
           
            selectedMonth: new Date().getMonth() + 1,
            selectedYear: new Date().getFullYear(),
            months: [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ],
            yearList: [],
        },
        mounted() {
            this.populateYearDropdown();
             this.LoadPaymentData();
        },
        computed: {
            reversedLogList() {
                return this.LogstList.slice().reverse();
            }
        },
        methods: {
            populateYearDropdown() {
                const currentYear = new Date().getFullYear();
                const startYear = currentYear - 5;
                const endYear = currentYear + 0;

                for (let year = startYear; year <= endYear; year++) {
                    this.yearList.push(year);
                }
            },
        //     LoadPaymentData($event) {
               
        //         let dthis = this;
        //          var param = {
        //                     Year: this.selectedYear,
        //                     Month: this.selectedMonth
        //                 };

        //          objCommon.AjaxCall("/home/loadValues", $.param(param), "GET", true, function (d) {
        //              console.log(d);
        //                      let arr =  d ;
                    
        //                     dthis.Summary = arr.Stats[0];
                            
                     

        //                 var Expense = arr.Graph.map(item => Math.round(item.Expense));
        //                 var Income = arr.Graph.map(item => Math.round(item.Income));
        //                 var Labels = arr.Graph.map(item => item.Labels);
        //                 console.log(Expense, Income, Labels);

        //                 var options = {
        //                     plugins: {
        //                         legend: {
        //                             display: true,
        //                             position: 'top',
        //                             labels: {
                                       
        //                                 padding: 10 Adjust padding
        //                             }
        //                         }
        //                     },
        //                     responsive: true,
        //                     maintainAspectRatio: false,
        //                     scales: {

        //                         x: {
        //                             beginAtZero: true
                                   
        //                         },
        //                         y: {
        //                             beginAtZero: true,
        //                             ticks: {
                                      
        //                                 callback: function (value) {
        //                                     return new Intl.NumberFormat('en-US', {
        //                                         style: 'currency',
        //                                         currency: 'USD'
        //                                     }).format(value);
        //                                 }
        //                             }
        //                         }
        //                     }
        //                 };

        //                 const ctx = document.getElementById('graphCompare').getContext('2d');
        //                         if (window.chart1) {
        //     window.chart1.destroy();
        // }
        //                     window.chart1 = new Chart(ctx, {
        //                         type: 'line',
        //                         data: {
        //                         labels: Labels,
        //                             datasets: [
        //                                 {
        //                                     type: 'line', Type of chart for this dataset
        //                                 data: Expense,
        //                                 label: 'Expense',
        //                                      borderColor: 'red',
        //                                   backgroundColor: 'rgba(255,0,0,0.1)',
        //                                   fill: false
        //                                 },
        //                                 {
        //                                     type: 'line', Type of chart for this dataset
        //                                 data: Income,
        //                                 label: 'Income',
        //                                  borderColor: 'green',
        //                                  backgroundColor: 'rgba(0,255,0,0.1)',
        //                                  fill: false
        //                                 }
        //                             ]
        //                         },
        //                         options: options
        //                     });

        //                 }, $event == null ? "" : $event.currentTarget);
           
        //     },




                LoadPaymentData($event) {
            let dthis = this;
            var param = {
                Year: this.selectedYear,
                Month: this.selectedMonth
            };

            // objCommon.AjaxCall("/home/loadValues", $.param(param), "GET", true, function (d) {
            //     let arr = d;
            //     dthis.Summary = arr.Stats[0];

            //     var Expense = arr.Graph.map(item => Math.round(item.Expense));
            //     var Income = arr.Graph.map(item => Math.round(item.Income));
            //     var Labels = arr.Graph.map(item => item.Labels);

            //     🛑 Extract anomaly markers
            //     var PointStyles = arr.Graph.map(item => item.IsAnomaly ? 'rectRot' : 'circle');
            //     var PointBackgrounds = arr.Graph.map(item => item.IsAnomaly ? 'red' : 'rgba(255,0,0,0.5)');

            //     🔵 Prediction Data
            //     var PredictedExpense = arr.Predicted.map(item => Math.round(item.PredictedExpense));
            //     var PredictedLabels = arr.Predicted.map(item => "Day " + item.Day);
            //       var PredictedIncome = arr.Predicted.map(item => Math.round(item.PredictedIncome));
                

            //     Merge labels and predicted labels
            //     Labels = Labels.concat(PredictedLabels);

            //     var options = {
            //         plugins: {
            //             legend: {
            //                 display: true,
            //                 position: 'top',
            //                 labels: {
            //                     padding: 10
            //                 }
            //             },
            //             tooltip: {
            //                 callbacks: {
            //                     label: function (context) {
            //                         let label = context.dataset.label || '';
            //                         if (label === 'Expense' && arr.Graph[context.dataIndex] && arr.Graph[context.dataIndex].IsAnomaly) {
            //                             return `${label}: ${context.formattedValue} ⚠️ Anomaly`;
            //                         }
            //                         return `${label}: ${context.formattedValue}`;
            //                     }
            //                 }
            //             }
            //         },
            //         responsive: true,
            //         maintainAspectRatio: false,
            //         scales: {
            //             x: {
            //                 beginAtZero: true
            //             },
            //             y: {
            //                 beginAtZero: true,
            //                 ticks: {
            //                     callback: function (value) {
            //                         return new Intl.NumberFormat('en-US', {
            //                             style: 'currency',
            //                             currency: 'USD'
            //                         }).format(value);
            //                     }
            //                 }
            //             }
            //         }
            //     };

            //     const ctx = document.getElementById('graphCompare').getContext('2d');
            //     if (window.chart1) {
            //         window.chart1.destroy();
            //     }

            //     window.chart1 = new Chart(ctx, {
            //         type: 'line',
            //         data: {
            //             labels: Labels,
            //             datasets: [
            //                 {
            //                     type: 'line',
            //                     data: Expense,
            //                     label: 'Expense',
            //                     borderColor: 'red',
            //                     backgroundColor: 'rgba(255,0,0,0.1)',
            //                     fill: false,
            //                     pointStyle: PointStyles,
            //                     pointBackgroundColor: PointBackgrounds,
            //                     pointRadius: 5
            //                 },
            //                 {
            //                     type: 'line',
            //                     data: Income,
            //                     label: 'Income',
            //                     borderColor: 'green',
            //                     backgroundColor: 'rgba(0,255,0,0.1)',
            //                     fill: false
            //                 },
            //                     {
            //                         type: 'line',
            //                         data: PredictedIncome,
            //                         label: 'Predicted Income',
            //                         borderColor: 'yellow',
            //                         borderDash: [5, 5],
            //                         backgroundColor: 'rgba(255, 253, 141, 0.8)',
            //                         fill: false,
            //                         pointStyle: 'triangle',
            //                         pointRadius: 4
            //                     },
            //                 {
            //                     type: 'line',
            //                     data: PredictedExpense,
            //                     label: 'Predicted Expense',
            //                     borderColor: 'blue',
            //                     borderDash: [5, 5],
            //                     backgroundColor: 'rgba(0,0,255,0.1)',
            //                     fill: false,
            //                     pointStyle: 'triangle',
            //                     pointRadius: 4
            //                 }
            //             ]
            //         },
            //         options: options
            //     });

            // }, $event == null ? "" : $event.currentTarget);


                    objCommon.AjaxCall("/home/loadValues", $.param(param), "GET", true, function (d) {
            let arr = d;
            dthis.Summary = arr.Stats[0];

            var Expense = arr.Graph.map(item => Math.round(item.Expense));
            var Income = arr.Graph.map(item => Math.round(item.Income));
            var Labels = arr.Graph.map(item => item.Labels);

            // 🔴 Anomaly markers for Expense
            var ExpensePointStyles = arr.Graph.map(item => item.IsExpenseAnomaly ? 'rectRot' : 'circle');
            var ExpensePointBackgrounds = arr.Graph.map(item => item.IsExpenseAnomaly ? 'red' : 'rgba(255,0,0,0.5)');

            // 🟢 Anomaly markers for Income
            var IncomePointStyles = arr.Graph.map(item => item.IsIncomeAnomaly ? 'cross' : 'circle');
            var IncomePointBackgrounds = arr.Graph.map(item => item.IsIncomeAnomaly ? 'orange' : 'rgba(0,255,0,0.5)');

            // 🔵 Prediction Data
            var PredictedExpense = arr.Predicted.map(item => Math.round(item.PredictedExpense));
            var PredictedIncome = arr.Predicted.map(item => Math.round(item.PredictedIncome));
            var PredictedLabels = arr.Predicted.map(item => "Day " + item.Day);

            // Merge labels and prediction padding
            Labels = Labels.concat(PredictedLabels);

            var options = {
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            padding: 10
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                let label = context.dataset.label || '';
                                let val = context.formattedValue;

                                // Handle anomalies in both datasets
                                if (label === 'Expense' && arr.Graph[context.dataIndex]?.IsExpenseAnomaly) {
                                    return `${label}: ${val} ⚠️ Anomaly`;
                                }
                                if (label === 'Income' && arr.Graph[context.dataIndex]?.IsIncomeAnomaly) {
                                    return `${label}: ${val} ⚠️ Anomaly`;
                                }
                                return `${label}: ${val}`;
                            }
                        }
                    }
                },
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return new Intl.NumberFormat('en-US', {
                                    style: 'currency',
                                    currency: 'USD'
                                }).format(value);
                            }
                        }
                    }
                }
            };

            const ctx = document.getElementById('graphCompare').getContext('2d');
            if (window.chart1) {
                window.chart1.destroy();
            }

            window.chart1 = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Labels,
                    datasets: [
                        {
                            type: 'line',
                            data: Expense,
                            label: 'Expense',
                            borderColor: 'red',
                            backgroundColor: 'rgba(255,0,0,0.1)',
                            fill: false,
                            pointStyle: ExpensePointStyles,
                            pointBackgroundColor: ExpensePointBackgrounds,
                            pointRadius: 5
                        },
                        {
                            type: 'line',
                            data: Income,
                            label: 'Income',
                            borderColor: 'green',
                            backgroundColor: 'rgba(0,255,0,0.1)',
                            fill: false,
                            pointStyle: IncomePointStyles,
                            pointBackgroundColor: IncomePointBackgrounds,
                            pointRadius: 5
                        },
                        {
                            type: 'line',
                            data: PredictedIncome,
                            label: 'Predicted Income',
                            borderColor: 'yellow',
                            borderDash: [5, 5],
                            backgroundColor: 'rgba(255, 253, 141, 0.8)',
                            fill: false,
                            pointStyle: 'triangle',
                            pointRadius: 4
                        },
                        {
                            type: 'line',
                            data: PredictedExpense,
                            label: 'Predicted Expense',
                            borderColor: 'blue',
                            borderDash: [5, 5],
                            backgroundColor: 'rgba(0,0,255,0.1)',
                            fill: false,
                            pointStyle: 'triangle',
                            pointRadius: 4
                        }
                    ]
                },
                options: options
            });

        }, $event == null ? "" : $event.currentTarget);

        }

           
        }
    });

    setTimeout(function () {
        $("#leftmenu li").removeClass("active");
            $("#lidashboard").addClass("active");
    }, 200);
</script>

    <script>
        var objCommon = new Common();
        $(document).ready(function () {
          

            $("#leftmenu li").removeClass("active");
            $("#lidashboard").addClass("active");

            $(".datatable").DataTable({
                "lengthMenu": [
                    [6, 10, 25, 50, -1],
                    [6, 10, 25, 50, 'All']
                ],
                "pageLength": 6
            });

            $('#ignismyModal').on('hidden.bs.modal', function () {
                window.location.reload();
            });
        });
    </script>


}